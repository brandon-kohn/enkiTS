cmake_minimum_required(VERSION 2.8)

project( enkiTS )

option( ENKITS_BUILD_C_INTERFACE	"Build C interface" OFF )
option( ENKITS_BUILD_EXAMPLES		"Build example applications" OFF )



include_directories ("${PROJECT_SOURCE_DIR}/src")

set( ENKITS_SRC
     src/LockLessMultiReadPipe.h
     src/TaskScheduler.h
     src/TaskScheduler.cpp
     )
	 
if( ENKITS_BUILD_C_INTERFACE )
	list( APPEND ENKITS_SRC
		src/TaskScheduler_c.h
		src/TaskScheduler_c.cpp
		)
endif()
	 
add_library( enkiTS STATIC ${ENKITS_SRC} )
target_include_directories(enkiTS INTERFACE
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>
    $<INSTALL_INTERFACE:include/enkiTS>
)

if(UNIX)
	set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
	find_package(Threads REQUIRED)
	if(CMAKE_USE_PTHREADS_INIT)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
	endif()
	target_link_libraries (enkiTS ${CMAKE_THREAD_LIBS_INIT})
endif()

if(UNIX)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()
if(APPLE)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
endif()

if(ENKITS_BUILD_EXAMPLES)

	if(WIN32)
    		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /d2Zi+" )
	endif()

	add_executable( UserThreads example/UserThreads.cpp example/Timer.h )
	target_link_libraries(UserThreads enkiTS )

	add_executable( ParallelSum example/ParallelSum.cpp example/Timer.h )
	target_link_libraries(ParallelSum enkiTS )
		
	add_executable( LambdaTask example/LambdaTask.cpp example/Timer.h )
	target_link_libraries(LambdaTask enkiTS )
	
	add_executable( TaskThroughput example/TaskThroughput.cpp example/Timer.h )
	target_link_libraries(TaskThroughput enkiTS )

if( ENKITS_BUILD_C_INTERFACE )
	add_executable( ParallelSum_c example/ParallelSum_c.c )
	target_link_libraries(ParallelSum_c enkiTS )
endif()	
endif()

# Deployment
install (DIRECTORY ${PROJECT_SOURCE_DIR}/src/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/enkiTS FILES_MATCHING PATTERN "*.h")
install (TARGETS ${PROJECT_NAME} ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}")
